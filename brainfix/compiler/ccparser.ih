// Generated by Bisonc++ V4.01.00 on Fri, 01 Mar 2013 13:22:26 +0100

    // Include this file in the sources of the class Parser.

// $insert class.h
#include "ccparser.h"
#include <iostream>
#include <algorithm>
#include <cstring>

// $insert namespace-open
namespace Compiler
{

inline void Parser::error(char const *msg)
{
    std::cerr << msg << '\n';
}

// $insert lex
inline int Parser::lex()
{
    int token = d_scanner.lex();
    
    // Based on the token, gathered from the scanner, a semantic
    // value needs to be set (or not):
    
    std::string matched = d_scanner.matched();
    std::istringstream iss(matched);
    
    switch (token)
    {
        case VAR:
        case FUNNAME:
            d_val__.get<Tag__::STRING>() = matched;
            break;
        case STR:
            d_val__.get<Tag__::STRING>() = matched;
            break;
        case CST:
            iss >> d_val__.get<Tag__::INT>();
            break;
        case CHR:
            d_val__.get<Tag__::CHAR>() = matched[0];
            break;
            
        // No sematic value needs to be set for keywords / operators
        default:
            break;
    }
    
    return token;
}


inline void Parser::print()         
{
    print__();           // displays tokens if --print was specified
}

// $insert namespace-close
}   // namespace Compiler

    // Add here includes that are only required for the compilation 
    // of Parser's sources.


// $insert namespace-use
    // UN-comment the next using-declaration if you want to use
    // symbols from the namespace Compiler without specifying Compiler::
//using namespace Compiler;

    // UN-comment the next using-declaration if you want to use
    // int Parser's sources symbols from the namespace std without
    // specifying std::

using namespace std;
using namespace Compiler;
#define ABS(x) ((x) < 0 ? -(x) : (x))

// Generated by Bisonc++ V4.01.00 on Fri, 01 Mar 2013 11:08:35 +0100

#ifndef PPParser_h_included
#define PPParser_h_included

// $insert baseclass
#include "ppparserbase.h"
#include "scanner/ppscanner.h"
#include <iosfwd>

// $insert namespace-open
namespace Preprocessor
{

struct Function
{
    std::string                 ret;
    std::string                 name;
    std::vector<std::string>    args;
    std::string                 body;
};
    
#undef Parser
class Parser: public ParserBase
{
    Scanner                     d_scanner;
    std::vector<Function>       d_functions;
    
    public:
        Function const &function(std::string const &funName) const;
        int parse(std::istream &in);

    private:
        int parse();
        void error(char const *msg);    // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc

    // support functions for parse():
        void executeAction(int ruleNr);
        void errorRecovery();
        int lookup(bool recovery);
        void nextToken();
        void print__();
        
        void addFunction(std::string const &retArg, 
                         std::string const &funName, 
                         std::vector<std::string> const &args, 
                         std::string const &body);
};

inline int Parser::parse(std::istream &in)
{
    d_scanner.switchStreams(in);
    return parse();
}

// $insert namespace-close
}

#endif
